import pandas as pd

# Read JSON data from the file into a Pandas DataFrame
df = pd.read_json('your_file.json')

# Convert the DataFrame to a flattened dictionary
flattened_dict = df.to_dict(orient='records')[0]

# Display the flattened key-value pairs
for key, value in flattened_dict.items():
    print(key, ":", value)


def find_key(dictionary, target_key):
    for key, value in dictionary.items():
        if key == target_key:
            print("Found key:", key)
            # Do something with the key or value
        if isinstance(value, dict):
            find_key(value, target_key)
        elif isinstance(value, list):
            for item in value:
                if isinstance(item, dict):
                    find_key(item, target_key)
# Example usage:
complex_dict = {
    'a': 1,
    'b': {
        'c': 2,
        'd': [3, 4, {'e': 5}]
    },
    'f': [6, 7, {'g': 8}]
}
find_key(complex_dict, 'e')


def iterate_objects(obj, indent=0):
    if isinstance(obj, (list, tuple)):
        for item in obj:
            iterate_objects(item, indent + 1)
    elif isinstance(obj, dict):
        for key, value in obj.items():
            print(' ' * indent * 2 + f'{key}:')
            iterate_objects(value, indent + 1)
    elif hasattr(obj, '__dict__'):
        for key, value in obj.__dict__.items():
            print(' ' * indent * 2 + f'{key}:')
            iterate_objects(value, indent + 1)
    else:
        print(' ' * indent * 2 + str(obj))


# to return 

def obj_to_dict(obj):
    if isinstance(obj, (list, tuple)):
        return [obj_to_dict(item) for item in obj]
    elif isinstance(obj, dict):
        return {key: obj_to_dict(value) for key, value in obj.items()}
    elif hasattr(obj, '__dict__'):
        return {key: obj_to_dict(value) for key, value in obj.__dict__.items()}
    else:
        return obj



import re

text = "$demo$123$"
text = re.sub(r"^\$|\$$", "", text)
